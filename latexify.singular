// THIS FILE IS A BIT A BIT OUT OF DATE AND NEEDS FIXES


execute(read( "generate_equations.singular"));


/********************************
*** LATEXIFICATION PROCEDURES ***
********************************/


LIB "findifs.lib"; // The 'replace' function is contained in this.


// Expands powers of the variables LL, LR, RL, and RR, when the powers lie between 1 and 9.
// Works on polynomials in string form.
// For example, "LL(2)^3" becomes "LL(2)LL(2)LL(2)".
// The implementation is very simple and only correctly works on variable powers.
// For example "(LL(1) + LL(2))^2" would not work correctly, since it would become "(LL(1) + LL(2))LL(2))".
proc expand_powers(string s)
{
  int caret_ind = find ( s, "^" );
  int pow_ind = caret_ind + 1;

  if ( caret_ind == 0 )
  { 
    // No caret found (the ^ character)
    return( s );
  }

  if ( find( "123456789" , s[pow_ind]) == 0 )
  {
    ERROR("Unexpected input to expand_powers. Input was: " + s); 
  }

  int pow = int( s[pow_ind] );

  // Decrement the power in the string
  s[pow_ind] = string( pow - 1 );

  if ( pow == 1 )
  {
    // Delete the exponent
    if ( pow_ind == size(s) )
    {
      // If the exponent is at the end of the string.
      s = s[1, caret_ind - 1];
    }
    else
    {
      // If the exponent is in the middle of the string.
      s = s[1, caret_ind - 1] + s[pow_ind + 1, size(s) - pow_ind];
    }
    return( expand_powers( s ) );
  }

  int var_start_ind = caret_ind - 2;
  // We will decrement this until we find LL, LR, RL or RR

  while ( find("LLRRL", s[var_start_ind,2]) == 0 )
  {
    var_start_ind = var_start_ind - 1;
  }
  
  string var_string = s[var_start_ind, caret_ind - var_start_ind];

  s = s[1, var_start_ind - 1] + var_string + s[var_start_ind, size(s) - var_start_ind + 1];

  return( expand_powers( s ) );
}

// We turn a polynomial in variables of the kind LR(2) into a latex form.
proc latexify_poly(poly p)
{
  string p_string = string(p);
 
  // Remove asterisks
  p_string = replace( p_string, "*", "");

  p_string = expand_powers( p_string );

  p_string = replace( p_string, "LL", "{\\lambda^\\LL");
  p_string = replace( p_string, "LR", "{\\lambda^\\LR");
  p_string = replace( p_string, "RL", "{\\lambda^\\RL");
  p_string = replace( p_string, "RR", "{\\lambda^\\RR");

  p_string = replace( p_string, "(1)", "_1}");
  p_string = replace( p_string, "(2)", "_2}");
  p_string = replace( p_string, "(3)", "_3}");
  p_string = replace( p_string, "(4)", "_4}");

  return( p_string );
}


// We take a list of polynomials and make an align* out of them.
proc latexify_eqs(list ps)
{
  string output = "{" + newline + "\\tiny" + newline;

  output = output + "\\begin{align*}" + newline;

  for(int i=1; i<=size(ps); i++)
  {
    output = output + latexify_poly( ps[i] )  + " & = 0 \\\\" + newline;
  } 

  output = output + "\\end{align*}" + newline;

  output = output + "}" + newline;

  return( output );
}


proc format_p(na_poly p)
{
  string output = string( p );
  
  output = replace( output, "*", "");

  return( output );
}


// u = list(a,b) will become the string "H_a(H_b(p))"
proc H_latex(list u, na_poly p)
{
  if( size(u) == 0 )
  {
    return( "p" );
  }
  else
  {
    string output = "H_{" + format_p( u[1] ) + "}(" + H_latex( delete(u,1), p ) + ")";
    return( output ); 
  }
}


proc H_latex_equality(list u, list v, na_poly p)
{
  return( H_latex( u, p ) + " - " + H_latex( v, p ) + " = 0" ); 
}


// This is like H_latex, but instead of a string, it evaluates H_a(H_b(p)) into a polynomial
proc H_poly(list u, na_poly p)
{
  if( size(u) == 0 )
  {
    return( p );
  }
  else
  {
    na_poly output = H( u[1], H_poly( delete(u,1), p ) );

    return( output ); 
  }
}


// Like H_latex_equality, but for polynomials, not strings.
proc H_eqs(list u, list v, na_poly p)
{
  return(na_get_coefficients( H_poly(u,p) - H_poly(v,p) ));
}


proc latexify_p_title(na_poly p)
{
  string output = string( p );
  
  output = replace( output, "*", "");
  
  output = "$p = " + output + "$" + newline;

  return( output );
}

proc latexify_H_title(list u, list v, na_poly p)
{
  string output = H_latex_equality(u, v, p);
  
  output = "\\[" + newline + output + newline + "\\]" + newline;

  return( output );
}


proc latex_subsection_title(list u, list v, na_poly p)
{
  string p_string = string( p );
  
  p_string = replace( p_string, "*", "");

  string output = "\\subsection{Equations stemming from $p = " + p_string + "$ and $" + H_latex_equality(u, v, p) + "$}" + newline + newline;
  return( output );
}


/*********************
*** LATEXIFICATION ***
*********************/

// Here we generate the actual latex code.
// Lots of redundant code, so this could be made nicer with helper functions.


print("STARTING LATEXIFICATION");


list eqs_total = list();
list eqs_temp = list();

string latex_string = "";



na_poly p = (a*b)*c;


list H_left = list(c,a);
list H_right = list();
// eqs = na_get_coefficients ( H(c,H(a,p)) - p );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );


list H_left = list(c,b);
list H_right = list();
// eqs = na_get_coefficients ( H(c,H(b,p)) - p );



latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );


list H_left = list(b,a);
list H_right = list(b);
// eqs = na_get_coefficients ( H(b,H(a,p)) - H(b,p) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );



list H_left = list(a,b);
list H_right = list(a);
// eqs = na_get_coefficients ( H(a,H(b,p)) - H(a,p) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




p = a*(b*c);

list H_left = list(a,b);
list H_right = list();
// eqs = na_get_coefficients ( H(a,H(b,p)) - p );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




list H_left = list(a,c);
list H_right = list();
//eqs = na_get_coefficients ( H(a,H(c,p)) - p );



latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




list H_left = list(b,c);
list H_right = list(b);
// eqs = na_get_coefficients ( H(b,H(c,p)) - H(b,p) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




list H_left = list(c,b);
list H_right = list(c);
// eqs =  na_get_coefficients ( H(c,H(b,p)) - H(c,p) );



latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




p = a*(b*(c*d));

list H_left = list(c*a,a*c,d,b);
list H_right = list(d*b,b*d,c);
// eqs = na_get_coefficients ( H(c*a,H(a*c,H(d,H(b,p))))
//                                          - H(d*b,H(b*d,H(c,p))) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );





list H_left = list(d*a,a*d,c,b);
list H_right = list(c*b,b*c,d);
//eqs = na_get_coefficients ( H(d*a,H(a*d,H(c,H(b,p))))
//                                          - H(c*b,H(b*c,H(d,p))) );



latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




p = a*((b*c)*d);

list H_left = list(c*a,a*c,b,d);
list H_right = list(d*b,b*d,c);
// eqs = na_get_coefficients ( H(c*a,H(a*c,H(b,H(d,p))))
//                                           - H(d*b,H(b*d,H(c,p))) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




list H_left = list(b*a,a*b,c,d);
list H_right = list(d*c,c*d,b);
// eqs = na_get_coefficients ( H(b*a,H(a*b,H(c,H(d,p))))
//                                           - H(d*c,H(c*d,H(b,p))) );



latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




p = (a*(b*c))*d;

list H_left = list(c*d,d*c,b,a);
list H_right = list(a*b,b*a,c);
// eqs = na_get_coefficients ( H(c*d,H(d*c,H(b,H(a,p))))
//                                           - H(a*b,H(b*a,H(c,p))) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




list H_left = list(b*d,d*b,c,a);
list H_right = list(a*c,c*a,b);
// eqs = na_get_coefficients ( H(b*d,H(d*b,H(c,H(a,p))))
//                                             - H(a*c,H(c*a,H(b,p))) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




p = ((a*b)*c)*d;

list H_left = list(b*d,d*b,a,c);
list H_right = list(a*c,c*a,b);
// eqs = na_get_coefficients ( H(b*d,H(d*b,H(a,H(c,p))))
//                                           - H(a*c,H(c*a,H(b,p))) );


latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );




list H_left = list(a*d,d*a,b,c);
list H_right = list(b*c,c*b,a);
// eqs = na_get_coefficients ( H(a*d,H(d*a,H(b,H(c,p))))
//                                           - H(b*c,H(c*b,H(a,p))) );



latex_string = latex_string + latex_subsection_title( H_left, H_right, p );

eqs_temp = H_eqs( H_left, H_right, p );
eqs_total = eqs_total + eqs_temp;

latex_string = latex_string + latexify_eqs( eqs_temp );



assert( set_equality(eqs, eqs_total), "ERROR: Latexified equations don't match the ones generated in the main file" );


write(":w latex_eqs.tex", latex_string);


print("LATEXIFICATION COMPLETE");